<template>
	<div>
		<list-page title="设置">
			<cell class="placeholder" />
			<cell v-for="(options, INDEX) in themeList" :key="`theme${INDEX}`" class="cell-item flex-row">
				<div
					v-for="(item, index) in options"
					:key="item.key"
					ref="card"
					elevation="3"
					class="theme-item"
					@tap="onTap(INDEX * 2 + index, item)"
					@longpress="showMoreActionFn(INDEX * 2 + index)"
				>
					<text class="cell-item-content">{{ item.label }}</text>
					<div class="color-bar" :style="{ backgroundColor: item.value || item.defaultValue }" />
					<more-action
						:show="showActionIndex == INDEX * 2 + index"
						left-text="重置"
						right-text="取消"
						@leftClick="resetTheme(item)"
						@rightClick="showActionIndex = -1"
					/>
				</div>
			</cell>
			<cell class="placeholder" />
		</list-page>
		<edit-popup ref="editPopup" />
	</div>
</template>

<script>
import moreAction from './more-action'
import editPopup from './edit-popup'

export default {
	components: {
		moreAction,
		editPopup
	},

	data() {
		return {
			showActionIndex: -1
		}
	},

	computed: {
		themeList() {
			const { theme } = this.$store.state
			const keys = Object.keys(theme)
			return new Array(Math.ceil(keys.length / 2)).fill().map((_, i) => keys.slice(i * 2, (i + 1) * 2).map(key => ({ key, ...theme[key] })))
		}
	},

	methods: {
		onTap(i, payload) {
			if (this.showActionIndex == i) return
			this.$refs.editPopup.show(true, payload)
		},
		showMoreActionFn(index) {
			if (this.showActionIndex == index) return
			this.showActionIndex = index
			uni.vibrateShort()
		},
		resetTheme({ key }) {
			this.$store.commit('saveTheme', { key })
			this.showActionIndex = -1
		}
	}
}
</script>

<style lang="scss" scoped>
.placeholder {
	height: 15rpx;
}
.cell-item {
	padding: 15rpx 30rpx;
	justify-content: space-between;
	.cell-item-content {
		font-size: 16px;
	}
	.theme-item {
		width: 330rpx;
		height: 200rpx;
		padding: 10px;
		border-radius: 5px;
		justify-content: space-between;
		background-color: #fff;
		transition: transform 0.3s;
		transform: scale(1, 1);
		&:active {
			transform: scale(0.95, 0.95);
		}
		.color-bar {
			height: 20px;
			border-radius: 5px;
			border: 1px solid #e0e0e0;
		}
	}
	.level-item {
		height: 200rpx;
		padding: 10px;
		border-radius: 5px;
		background-color: #fff;
		transition: transform 0.3s;
		transform: scale(1, 1);
		justify-content: space-around;
		&:active {
			transform: scale(0.95, 0.95);
		}
		.level-item-title {
			font-size: 18px;
		}
		.best-score {
			justify-content: space-between;
		}
	}
}
</style>
